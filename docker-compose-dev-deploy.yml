version: "3.9"

services:

  # TODO reference correct conf file...
  nginx:
    build:
      context: ./nginx
    container_name: mindtools-nginx
    ports:
      - "80:8080"
      - "443:8081"
    volumes:
      - ./.docker-data/static:/static
      - ./.docker-data/media:/media

    depends_on:
      - app

  db:
    image: postgres
    container_name: mindtools-postgres
    volumes:
      - postgresql-volume:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres -p 5432" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    container_name: mindtools-redis
    command: redis-server --appendonly yes --requirepass $REDIS_PASSWORD
    volumes:
      - ./.docker-data/redis:/data
    env_file:
      - .env
    ports:
      - '6379:6379'
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: mindtools-app-image
    env_file:
      - .env  # TODO ADD SECRETS and env vars on the server
    environment:
      - DJANGO_SETTINGS_MODULE=serafin.settings
      - DJANGO_CONFIGURATION=Staging
      - DJANGO_MEDIA_ROOT=/media/
      - DJANGO_STATIC_ROOT=/static/

    command:
      - bash
      - -c
      - |
        python manage.py migrate
        python manage.py createsuperuser --email admin@admin.com --noinput && cat <<-000 | python manage.py shell
        from django.contrib.auth import get_user_model
        admin = get_user_model().objects.get(email='admin@admin.com')
        admin.set_password('admin')
        admin.save()
        print('Superuser password updated successfully.')
        000
        python manage.py collectstatic --noinput
        gunicorn --workers 3 serafin.wsgi --timeout 180 --bind 0.0.0.0:8000 --reload

    volumes:
      - ./.docker-data/static:/static
      - ./.docker-data/media:/media
      - .:/srv/app # Mount the local folder directly, so no need for extra build
    expose:
      - "8000"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  huey:
    image: mindtools-app-image
    env_file:
      - .env     # TODO ADD SECRETS and env vars on the server
    environment:
      - DJANGO_SETTINGS_MODULE=serafin.settings
      - DJANGO_CONFIGURATION=Staging
      - DJANGO_MEDIA_ROOT=/media/
      - DJANGO_STATIC_ROOT=/static/

    volumes:
      - ./.docker-data/static:/static
      - ./.docker-data/media:/media
      - .:/srv/app # Mount the local folder directly, so no need for extra build

    command: python manage.py run_huey --disable-autoload
    depends_on:
      - app

volumes:
  postgresql-volume:
  static_data:
